name: Post Trace Preview Comment

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  actions: read
  issues: write
  pull-requests: write

jobs:
  wait-and-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq unzip

      - name: Get PR metadata
        id: prmeta
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
          echo "head_branch=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_OUTPUT"
          echo "head_sha=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_OUTPUT"

      - name: Poll for 'outputs' artifact (max 10 minutes)
        id: wait_artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          HEAD_SHA: ${{ steps.prmeta.outputs.head_sha }}
        run: |
          echo "Looking for 'outputs' artifact on latest successful workflow run for PR #${{ steps.prmeta.outputs.pr_number }} (branch: ${{ steps.prmeta.outputs.head_branch }}, sha: $HEAD_SHA)"

          for i in {1..10}; do
            echo "Attempt $i of 10..."

            RUNS=$(gh api repos/$REPO/actions/runs \
              --paginate \
              --jq '.workflow_runs[] | select(.head_sha == env.HEAD_SHA and .event == "pull_request" and .conclusion == "success") | {id, artifacts_url}')

            if [[ -z "$RUNS" ]]; then
              echo "No matching successful runs yet. Sleeping 60s..."
              sleep 60
              continue
            fi

            # Iterate matching runs and look for the 'outputs' artifact
            while IFS= read -r row; do
              RUN_ID=$(jq -r '.id' <<<"$row")
              ARTIFACTS_URL=$(jq -r '.artifacts_url' <<<"$row")

              ARTIFACT_ID=$(gh api "$ARTIFACTS_URL" \
                --jq '.artifacts[] | select(.name == "outputs") | .id' || true)

              if [[ -n "$ARTIFACT_ID" ]]; then
                echo "✅ Found artifact ID: $ARTIFACT_ID from run $RUN_ID"
                echo "artifact_id=$ARTIFACT_ID" >> "$GITHUB_OUTPUT"
                echo "run_id=$RUN_ID" >> "$GITHUB_OUTPUT"
                exit 0
              fi
            done < <(jq -c <<<"$RUNS")

            echo "Still no artifact. Sleeping 60s..."
            sleep 60
          done

          echo "❌ Timed out waiting for 'outputs' artifact."
          exit 1

      - name: Download and extract artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ARTIFACT_ID: ${{ steps.wait_artifact.outputs.artifact_id }}
        run: |
          echo "Downloading artifact.zip for artifact $ARTIFACT_ID..."
          gh api /repos/$REPO/actions/artifacts/$ARTIFACT_ID/zip > artifact.zip
          mkdir -p artifact_contents
          unzip -q artifact.zip -d artifact_contents

      - name: Comment on PR with image previews
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const basePath = 'artifact_contents';
            if (!fs.existsSync(basePath)) {
              core.setFailed(`Artifact folder '${basePath}' not found`);
            }

            const folders = fs.readdirSync(basePath).filter(f =>
              fs.statSync(path.join(basePath, f)).isDirectory()
            );

            const marker = "## 🔍 Efficiency Trace Preview";
            let body = `${marker}\n`;
            body += `This comment shows \`trace_efficiency_mm.png\` previews from the latest CI artifact.\n\n`;

            for (const folder of folders.sort()) {
              const imgPath = path.join(basePath, folder, 'trace_efficiency_mm.png');
              body += `### ${folder}\n`;
              if (fs.existsSync(imgPath)) {
                const stats = fs.statSync(imgPath);
                // Optional: skip very large images to avoid comment size limits (~65k chars)
                // if (stats.size > 300000) { body += `_Image too large to inline (${stats.size} bytes)._\\n\\n`; continue; }
                const imgData = fs.readFileSync(imgPath).toString('base64');
                body += `![${folder}](data:image/png;base64,${imgData})\n\n`;
              } else {
                body += `_No trace_efficiency_mm.png found._\n\n`;
              }
            }

            const prNumber = context.payload.pull_request.number;

            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body && c.body.includes(marker)
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: botComment.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body,
              });
            }
