name: Post Trace Preview Comment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  wait-and-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Wait for 'outputs' artifact on latest PR workflow run (max 10 min)
        id: wait-artifact
        run: |
          echo "Polling for 'outputs' artifact from latest CI workflow for this PR..."

          for i in {1..10}; do
            echo "Attempt $i of 10..."
            RUNS=$(gh api repos/${{ github.repository }}/actions/runs \
              --paginate \
              -F event=pull_request \
              --jq '.workflow_runs[] | select(.head_branch == "${{ github.head_ref }}" and .conclusion == "success") | {id: .id, artifacts_url: .artifacts_url}')

            for row in $(echo "$RUNS" | jq -c '.'); do
              RUN_ID=$(echo "$row" | jq -r '.id')
              ARTIFACTS_URL=$(echo "$row" | jq -r '.artifacts_url')

              ARTIFACT_ID=$(gh api "$ARTIFACTS_URL" \
                --jq '.artifacts[] | select(.name == "outputs") | .id')

              if [[ -n "$ARTIFACT_ID" ]]; then
                echo "✅ Found artifact with ID: $ARTIFACT_ID from run $RUN_ID"
                echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_ENV
                exit 0
              fi
            done

            echo "Artifact not found yet. Sleeping 60 seconds..."
            sleep 60
          done

          echo "❌ Timed out waiting for 'outputs' artifact."
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and unzip artifact
        run: |
          echo "Downloading artifact ID $artifact_id"
          gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/artifacts/$artifact_id/zip \
            --output artifact.zip
          mkdir artifact_contents
          unzip -q artifact.zip -d artifact_contents
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List contents (debug)
        run: ls -R artifact_contents

      - name: Post PR comment with images
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const basePath = 'artifact_contents';
            const folders = fs.readdirSync(basePath).filter(f => fs.statSync(path.join(basePath, f)).isDirectory());

            let body = `## 🔍 Efficiency Trace Preview\n`;
            body += `Preview of \`trace_efficiency_mm.png\` from the CI run for this PR.\n\n`;

            for (const folder of folders.sort()) {
              const imgPath = path.join(basePath, folder, 'trace_efficiency_mm.png');
              if (fs.existsSync(imgPath)) {
                const imgData = fs.readFileSync(imgPath).toString('base64');
                body += `### ${folder}\n`;
                body += `![${folder}](data:image/png;base64,${imgData})\n\n`;
              } else {
                body += `### ${folder}\n`;
                body += `_No trace_efficiency_mm.png found._\n\n`;
              }
            }

            const prNumber = context.payload.pull_request.number;

            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: prNumber,
            });

            const marker = "## 🔍 Efficiency Trace Preview";
            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes(marker)
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: botComment.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body,
              });
            }
