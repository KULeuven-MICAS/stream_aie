name: summarize-results
on:
  workflow_call:
    outputs:
      summary_md:
        description: "Markdown summary of GEMM results"
        value: ${{ jobs.summarize.outputs.summary_md }}

jobs:
  summarize:
    runs-on: [self-hosted, linux]
    outputs:
      summary_md: ${{ steps.build.outputs.summary_md }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download outputs
        uses: actions/download-artifact@v4
        with:
          name: outputs-errors
          path: outputs

      - name: Summarize GEMM results (success & failure)
        id: build
        if: always()
        shell: bash -l {0}
        run: |
          set -uo pipefail
          SUMMARY_FILE="gemm_summary.md"
          mkdir -p outputs || true

          # Timestamps
          DEN_TS="$(TZ='America/Denver' date '+%Y-%m-%d %H:%M:%S %Z')"
          BRU_TS="$(TZ='Europe/Brussels' date '+%Y-%m-%d %H:%M:%S %Z')"

          total=0; ok=0; fail=0
          {
            echo "## GEMM Deployment Summary"
            echo
            echo "- Workflow: \`${{ github.workflow }}\`"
            echo "- Commit: \`${{ github.sha }}\`"
            echo "- Runner: \`${{ runner.name }}\`"
            echo "- Run time: Denver \`${DEN_TS}\` • Brussels \`${BRU_TS}\`"
            echo "- Run: [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}); Attempt ${{ github.run_attempt }}"
            echo
            echo "| HW | M | K | N | Status | Note |"
            echo "|---|---|---|---|--------|------|"
          } > "$SUMMARY_FILE"

          shopt -s nullglob
          found_dirs=0
          for dir in outputs/*; do
            [ -d "$dir" ] || continue
            found_dirs=1
            base="$(basename "$dir")"
            total=$((total+1))

            hwid="?"; M="?"; K="?"; N="?"; note=""
            if [[ "$base" =~ ^(.+)-gemm_([0-9]+)_([0-9]+)_([0-9]+)-fused-constraint-optimization$ ]]; then
              hwid="${BASH_REMATCH[1]}"; M="${BASH_REMATCH[2]}"; K="${BASH_REMATCH[3]}"; N="${BASH_REMATCH[4]}"
            else
              note="Unrecognized output directory format"
            fi

            status_file="$dir/status.ok"
            if [[ -f "$status_file" ]] && grep -q "success" "$status_file"; then
              echo "| $hwid | $M | $K | $N | ✅ success | $note |" >> "$SUMMARY_FILE"
              ok=$((ok+1))
            else
              msg_file="$dir/error_summary.txt"
              if [[ -f "$msg_file" ]]; then
                note="$(head -n 1 "$msg_file")"
              else
                note="missing status.ok"
              fi
              echo "| $hwid | $M | $K | $N | ❌ failed | ${note//|/\\|} |" >> "$SUMMARY_FILE"
              fail=$((fail+1))
            fi
          done

          if [[ $found_dirs -eq 0 ]]; then
            echo "_No output directories found in \`outputs/*\`. The pipeline likely failed early._" >> "$SUMMARY_FILE"
          fi

          echo >> "$SUMMARY_FILE"
          echo "**Totals:** ✅ \`$ok\`  •  ❌ \`$fail\`  •  All: \`$total\`" >> "$SUMMARY_FILE"

          # Append successful run details
          shopt -s nullglob
          appended=0
          for d in outputs/*; do
            [ -d "$d" ] || continue
            if [[ -f "$d/status.ok" ]] && grep -q success "$d/status.ok"; then
              details_file="$d/traces/details.md"
              if [[ -f "$details_file" ]]; then
                echo >> "$SUMMARY_FILE"
                cat "$details_file" >> "$SUMMARY_FILE"
                appended=$((appended+1))
              fi
            fi
          done
          if [[ $appended -eq 0 ]]; then
            echo >> "$SUMMARY_FILE"
            echo "_No detailed traces found to display (no traces/details.md files present in successful runs)._ " >> "$SUMMARY_FILE"
          fi

          {
            echo "summary_md<<EOF"
            cat "$SUMMARY_FILE"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          # Show the main summary on the Actions summary page
          cat "$SUMMARY_FILE" >> "$GITHUB_STEP_SUMMARY"

      - name: Build failure traces markdown (separate file)
        if: always()
        shell: bash -l {0}
        run: |
          set -uo pipefail
          FAIL_FILE="gemm_failures.md"
          echo "## Failure Traces" > "$FAIL_FILE"

          shopt -s nullglob
          appended_fail=0
          for d in outputs/*; do
            [ -d "$d" ] || continue
            if [[ ! -f "$d/status.ok" ]] || ! grep -q success "$d/status.ok"; then
              trace_file="$d/error_trace.md"
              if [[ -f "$trace_file" ]]; then
                echo >> "$FAIL_FILE"
                cat "$trace_file" >> "$FAIL_FILE"
                appended_fail=$((appended_fail+1))
              fi
            fi
          done

          if [[ $appended_fail -eq 0 ]]; then
            echo >> "$FAIL_FILE"
            echo "_No failed run traces found to display (no error_trace.md files present)._ " >> "$FAIL_FILE"
          fi

          # Also show this separate failures doc on the Actions summary page
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "## Failure Traces (separate document)" >> "$GITHUB_STEP_SUMMARY"
          echo "_See detailed collapsed logs below. This section is not posted to PR comments._" >> "$GITHUB_STEP_SUMMARY"
          cat "$FAIL_FILE" >> "$GITHUB_STEP_SUMMARY"

      - name: Upload summary artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gemm-summary
          path: gemm_summary.md
          if-no-files-found: error
          retention-days: 7

      - name: Upload failures artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gemm-failures
          path: gemm_failures.md
          if-no-files-found: error
          retention-days: 7
